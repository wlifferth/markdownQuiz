#!/usr/local/bin/python3.5

import fileinput
import random
import time
import os
import sys
from pickle import Pickler, Unpickler
from question import Question
from importContent import importContent
from correctMessages import correctMessages

optionLetters = list("ABCDEFGHIJKLMNOP")

quizAnswers = [0, 0, 0, 0]


class Quiz:
    def __init__(self, questions):
        self.right = 0
        self.wrong = 0
        self.place = 0
        self.questions = questions
        printD("Entered! quiz size = {}".format(len(self.questions)))
        menuOption = self.menu()
        if(menuOption == '0'):
            self.askQuestion = self.askQuestionMC
        else:
            self.askQuestion = self.askQuestionFR

    def menu(self):
        printD("How would you like to be tested?")
        printD("[0] Multiple Choice")
        printD("[1] Free Response")
        choices = list("01")
        choice = input(">>>> ")
        while(choice not in choices):
            printD("Sorry that wasn't a valid option. Try again.")
            choice = input(">>>> ")
        printD("The quiz is currently {} questions long.".format(len(self.questions)))
        printD("Would you like to limit its size?")
        printD("[0] No limit (take the whole quiz)")
        printD("[1] Limit to 10 questions")
        printD("[2] Limit to 20 questions")
        printD("[3] limit to weak questions")
        choices = list("0123")
        limitChoice = input(">>>> ")
        while(limitChoice not in choices):
            printD("Sorry that wasn't a valid option. Try again.")
            limitChoice = input(">>>> ")
        self.questions.sort(key=lambda x: x.rating)
        if limitChoice == '1' and len(self.questions) > 10:
            self.questions = self.questions[:10]
        elif limitChoice == '2' and len(self.questions) > 20:
            self.questions = self.questions[:20]
        elif limitChoice == '3':
            for questions in self.questions:
                if question.rating > 85:
                    del question
        return choice

    def take(self):
        random.shuffle(self.questions)
        random.seed()
        for question in self.questions:
            if(self.askQuestion() == -1):
                self.gradeQuiz()
                return
            elif(self.isFinished()):
                self.gradeQuiz()
                return
            time.sleep(0.5)
            self.place += 1

    def askQuestionMC(self):
        question = self.questions[self.place]
        options = []
        optionIndices = []
        optionIndices.append(self.place)
        optionIndices.append(
            getNewRandom(len(self.questions), exclude=optionIndices)
            )
        optionIndices.append(
            getNewRandom(len(self.questions), exclude=optionIndices)
            )
        optionIndices.append(
            getNewRandom(len(self.questions), exclude=optionIndices)
            )
        random.shuffle(optionIndices)
        for index in optionIndices:
            options.append(self.questions[index].answer)
        random.shuffle(options)
        printD("="*80)
        time.sleep(0.1)
        printD("GIVEN:")
        printD(question.given)
        printD("")
        for n in range(len(options)):
            if(question.answer == options[n]):
                quizAnswers[n] += 1
            printD("{}. {}".format(optionLetters[n], options[n]))
        answer = input(">>>> ")
        if(answer.upper() == "Q"):
            self.gradeQuiz()
            return -1
        while(answer.upper() not in optionLetters[:len(options)]):
            printD("Sorry... looks like that wasn't a valid option.")
            printD("Try again:")
            answer = input(">>>> ")
            if(answer.upper() == "Q"):
                self.gradeQuiz()
                return -1
        if(options[optionLetters.index(answer.upper())] == question.answer):
            self.right += 1
            self.questions[self.place].answered(True);
            printD(random.choice(correctMessages))
        else:
            self.wrong += 1
            self.questions[self.place].answered(False);
            printD("Better luck next time!")
            printD("Answer: {}".format(question.answer))

    def askQuestionFR(self):
        question = self.questions[self.place]
        printD("GIVEN:")
        printD(question.given)
        printD("")
        answer = input(">>>> ")
        if(answer.upper() == "Q"):
            self.gradeQuiz()
            return -1
        printD("ANSWER:")
        printD(question.answer)
        printD("Did you get that right? [y/n]")
        correct = input(">>>> ")
        if(correct.upper() == "Y"):
            self.right += 1
            printD(random.choice(correctMessages))
        else:
            self.wrong += 1
            printD("Better luck next time!")
        return



    def isFinished(self):
        if(self.place == len(self.questions) - 1):
            return True
        return False

    def gradeQuiz(self):
        if os.stat("." + sys.argv[1] + ".mdq").st_size != 0:
            readFile = open("." + sys.argv[1] + ".mdq", "rb")
            oldQuestions = Unpickler(readFile).load();
        for question in oldQuestions:
            if question.given not in [x.given for x in self.questions]:
                self.questions.append(question)
        writeFile = open("." + sys.argv[1] + ".mdq", 'wb+')
        Pickler(writeFile).dump(self.questions)
        totalCompleted = self.right + self.wrong
        if totalCompleted == 0:
            printD("You didn't do a single question")
            return
        printD("\n"*4)
        percentCorrect = 100 * self.right / totalCompleted
        printD("You got {}% correct.".format(percentCorrect))
        printD("You finished {} out of {} total questions".format(totalCompleted, len(self.questions)))
        for n in range(len(quizAnswers)):
            print("{} of the answers were {}".format(quizAnswers[n], optionLetters[n]))
        choices = list("01")
        printD("Print out results?")
        printD("[0] No")
        printD("[1] Yes")
        choice = input(">>>> ")
        while(choice not in choices):
            printD("Sorry that wasn't a valid option. Try again.")
            choice = input(">>>> ")
        if choice == '1':
            for question in self.questions:
                print("{}\noveral rating: {}\n".format(question.given, question.rating))





def printD(message):
    print(message)
    time.sleep(0.1)


def getNewRandom(size, exclude=[]):
    index = random.randint(0, size - 1)
    while(index in exclude):
        index = random.randint(0, size - 1)
    return index

if __name__ == "__main__":
    quiz = Quiz(questions=importContent())
    quiz.take()
